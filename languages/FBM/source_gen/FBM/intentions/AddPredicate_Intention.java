package FBM.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import FBM.behavior.FactType__BehaviorDescriptor;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;

public final class AddPredicate_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddPredicate_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:b5b9b520-10d1-4f11-afb3-3fa6e2aae6f4(FBM.intentions)", "9079593021082599126"));
  }
  @Override
  public String getPresentation() {
    return "AddPredicate";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddPredicate_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add Predicate";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if (SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xc25c730f75b14ba8L, 0xbf0613ccd89082c9L, 0x35ceb9094baf5b2dL, 0x35ceb9094bb58e09L, "Predicates")).isEmpty()) {
        FactType__BehaviorDescriptor.addDefaultPredicate_id7S1crWQKwHt.invoke(node);
      } else {
        SLinkOperations.addNewChild(node, MetaAdapterFactory.getContainmentLink(0xc25c730f75b14ba8L, 0xbf0613ccd89082c9L, 0x35ceb9094baf5b2dL, 0x35ceb9094bb58e09L, "Predicates"), null);
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddPredicate_Intention.this;
    }
  }
}
